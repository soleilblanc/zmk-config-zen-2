/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// Define layer numbers
#define DEF 0
#define NAV 1
#define NUM 2
#define FUN 3
#define PLY 4
#define PAD 5
#define MOUSE 6
#define ADJ 7

// ZMK includes
#include <behaviors.dtsi>
// #include <behaviors/num_word.dtsi>          // Urob's feature from dhruvinsh
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include "zmk-helpers/helper.h"             // Urob's features
#include "zmk-helpers/key-labels/42.h"      // Urob's features
// #include "combos.dtsi"                      // separate personal combos
#include "mouse.dtsi"                       // Urob's features
#include <dt-bindings/zmk/mouse.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/* Global settings */

/*
#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};
*/

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4   // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4   // right hand
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2                                       // thumbs

/* ZMK helper behaviors */
/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
/*
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};
*/

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
/* #define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
) */
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT KP_DOT COMMA PLUS MINUS STAR FSLH EQUAL CARET PRCNT UP DOWN LEFT RIGHT>;
};

// smart-mouse, requires PR #1366
/*ZMK_TRI_STATE(smart_mouse,
    bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions = <LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB2 LH0 LH1 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RH0 RH1 RH2>;
    ignored-layers = <MOUSE>;
) */

// #define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 40

// #define COMBO_IDLE_FAST 150
// #define COMBO_IDLE_SLOW 100


/ {
    behaviors {
    // tap-dances, layer
        td_NAV_bspc: td_NAV_bspc_nWord {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&blt NAV BSPC>, <&num_word>;

            tapping-term-ms = <220>;
        };

        td_NUM_ret: td_NUM_enter_nvWord {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&blt NUM RET>, <&nav_word>;

            tapping-term-ms = <220>;
        };

        nav_word: nav_word {
            #binding-cells = <0>;
            compatible = "zmk,behavior-caps-word";
            layers = <NAV>;
            continue-list = <BSPC DEL DOT KP_DOT COMMA PLUS MINUS STAR FSLH EQUAL CARET PRCNT UP DOWN LEFT RIGHT>;
            ignore-numbers;
        };

        td_cmd_fn: td_cmd_fn {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp RGUI>, <&kp INS>;

            tapping-term-ms = <250>;
        };

        td_cmd_esc: td_cmd_esc_PAD {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt LGUI ESC>, <&mo PAD>;

            tapping-term-ms = <250>;
        };

    // tap-dances, arrows
        td_up: td_up {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&mt LG(UP) LA(UP_ARROW)>;

            tapping-term-ms = <250>;
        };

        td_left: td_left {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&mt LG(LEFT) LA(LEFT)>;

            tapping-term-ms = <250>;
        };

        td_down: td_down {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&mt LG(DOWN) LA(DOWN)>;

            tapping-term-ms = <250>;
        };

        td_right: td_right {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&mt LG(RIGHT) LA(RIGHT)>;

            tapping-term-ms = <250>;
        };

    // tap-dances, double symbols
        td_DPAR: td_Doubel_PAR {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RPAR LPAR>, <&m_DPAR>;
        };

        td_DBKT: td_Double_BKT {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RBKT LBKT>, <&m_DBKT>;
        };

        td_DBRC: td_Double_BRC {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RBRC LBRC>, <&m_DBRC>;
        };

    // hold-tap, new beheviors
        //  hold to layer, quickly tap-tap holding to output key
        qlt: quick_lt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <200>;
        };

        //  change flavor to balanced
        blt: blance_lt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
        };

    // hold-tap, infused-kim's Homerow-Mod
        hm_l: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;               // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
            hold-trigger-on-release;            // delay positional check until key-release
        };

        hm_r: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hm_lq: hm_left_quick {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
            // hold-trigger-on-release;
        };

        hm_rq: hm_right_quick {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            // hold-trigger-on-release;
        };

    // tri-state: tab swap
        swapper_tab: swapper_tab {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <0 12>;
        };

    // Caps-word, num-word and smart-mouse
        // tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        smart_mouse: smart_mouse {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
            ignored-key-positions = <1 2 3 4 7 8 9 10 13 14 15 16 17 18 19 20 21 22 27 29 30 36 37 38 39 40 41>;
            ignored-layers = <MOUSE>;
        };

        mm_ret_sNum: enter_smartNumber {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RET>, <&num_word>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";
    // left hand: horizontal
        // ZMK_COMBO(tab, &kp TAB, LT3 LT2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_tab {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
        };

        // ZMK_COMBO(grave, &kp GRAVE, LM3 LM2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_grave {
            bindings = <&kp GRAVE>;
            key-positions = <14 15>;
        };

        // ZMK_COMBO(tilde, &kp TILDE, LM4 LM3, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_tilde {
            bindings = <&kp TILDE>;
            key-positions = <13 14>;
        };

        // ZMK_COMBO(repeat, &key_repeat, LT2 LT1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_repeat {
            bindings = <&key_repeat>;
            key-positions = <3 4>;
        };

        // ZMK_COMBO(L_enter, &kp RET, LM2 LM1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_L_enter {
            bindings = <&kp RET>;
            key-positions = <15 16>;
            timeout-ms = <80>;
        };

        // ZMK_COMBO(L_equal, &kp EQUAL, LB4 LB3, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_L_equal {
            bindings = <&kp EQUAL>;
            key-positions = <25 26>;
        };

        // ZMK_COMBO(L_minus, &kp MINUS, LB3 LB2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_L_minus {
            bindings = <&kp MINUS>;
            key-positions = <26 27>;
        };

        // ZMK_COMBO(L_under, &kp UNDER, LB2 LB1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_L_under {
            bindings = <&kp UNDER>;
            key-positions = <27 28>;
        };

    // left hand: vertical
        //ZMK_COMBO(excl_qmark, &mt EXCL QMARK, LT4 LM4, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_excl_qmark {
            bindings = <&mt EXCL QMARK>;
            key-positions = <1 13>;
        };

        //ZMK_COMBO(amps_at, &mt AMPS AT, LT3 LM3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_amps_at {
            bindings = <&mt AMPS AT>;
            key-positions = <2 14>;
        };

        //ZMK_COMBO(star_hash, &mt STAR HASH, LT2 LM2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_star_hash {
            bindings = <&mt STAR HASH>;
            key-positions = <3 15>;
        };

        //ZMK_COMBO(JPY_dllr, &mt LA(Y) DLLR, LT1 LM1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_JPY_dollar {
            bindings = <&mt LA(Y) DLLR>;
            key-positions = <4 16>;
        };

        //ZMK_COMBO(caret_prcnt, &mt CARET PRCNT, LT0 LM0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_caret_prcnt {
            bindings = <&mt CARET PRCNT>;
            key-positions = <5 17>;
        };

        //ZMK_COMBO(sqt, &kp SQT, LM1 LB1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_sqt {
            bindings = <&kp SQT>;
            key-positions = <16 28>;
        };

        //ZMK_COMBO(semicolon, &kp SEMICOLON, LM0 LB0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <17 29>;
        };

    // left hand: diagonal
        // ZMK_COMBO(L_fslh, &kp FSLH, LT2 LM3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_L_fslh {
            bindings = <&kp FSLH>;
            key-positions = <3 14>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        // ZMK_COMBO(L_bslh, &kp BSLH, LT2 LM1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_L_bslh {
            bindings = <&kp BSLH>;
            key-positions = <3 16>;
            timeout-ms = <COMBO_TERM_SLOW>;
        };

        // ZMK_COMBO(lessthan, &kp LT, LM2 LB3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_lessthan {
            bindings = <&kp LT>;
            key-positions = <15 26>;
            timeout-ms = <COMBO_TERM_SLOW>;
        };

        // ZMK_COMBO(greaterthan, &kp GT, LM2 LB1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_greaterthan {
            bindings = <&kp GT>;
            key-positions = <15 28>;
            timeout-ms = <COMBO_TERM_SLOW>;
        };

    // right hand: horizontal
        // ZMK_COMBO(jpy, &kp LA(Y), RT1 RT2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_jpy {
            bindings = <&kp LA(Y)>;
            key-positions = <7 8>;
        };

        // ZMK_COMBO(R_enter, &kp RET, RM1 RM2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_R_enter {
            bindings = <&kp RET>;
            key-positions = <19 20>;
        };

        // ZMK_COMBO(R_equal, &kp EQUAL, RM3 RM4, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_R_equal {
            bindings = <&kp EQUAL>;
            key-positions = <21 22>;
        };

        // ZMK_COMBO(R_under, &kp UNDER, RB1 RB2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_R_under {
            bindings = <&kp UNDER>;
            key-positions = <31 32>;
        };

        // ZMK_COMBO(r_pipe, &kp PIPE, RB2 RB3, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_R_pipe {
            bindings = <&kp PIPE>;
            key-positions = <32 33>;
        };

    // right hand: vertical
        // ZMK_COMBO(R_caret, &kp CARET, RT0 RM0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        // ZMK_COMBO(R_plus, &kp PLUS, RT1 RM1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_plus {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
        };

        // ZMK_COMBO(R_star, &kp STAR, RT2 RM2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_star {
            bindings = <&kp STAR>;
            key-positions = <8 20>;
        };

        // ZMK_COMBO(R_amps, &kp AMPS, RT3 RM3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_amps {
            bindings = <&kp AMPS>;
            key-positions = <9 21>;
        };

        // ZMK_COMBO(R_minus, &kp MINUS, RM1 RB1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_minus {
            bindings = <&kp MINUS>;
            key-positions = <19 31>;
        };

        // ZMK_COMBO(R_fslh, &kp FSLH, RM2 RB2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_fslh {
            bindings = <&kp FSLH>;
            key-positions = <20 32>;
        };

        // ZMK_COMBO(R_bslh, &kp BSLH, RM3 RB3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_bslh {
            bindings = <&kp BSLH>;
            key-positions = <21 33>;
        };

    // functional
        // ZMK_COMBO(bkfw, &mt LG(RBKT) LG(LBKT), LT5 LT4, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_BackForward {
            bindings = <&mt LG(RBKT) LG(LBKT)>;
            key-positions = <1 2>;
        };

        // ZMK_COMBO(dbrc, &td_DBRC, LT1 LT0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_dBRC {
            bindings = <&td_DBRC>;
            key-positions = <4 5>;
        };

        // ZMK_COMBO(dpar, &td_DPAR, LM1 LM0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_dPAR {
            bindings = <&td_DPAR>;
            key-positions = <16 17>;
        };

        // ZMK_COMBO(dbkt, &td_DBKT, LB1 LB0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_dBKT {
            bindings = <&td_DBKT>;
            key-positions = <28 29>;
        };

        // ZMK_COMBO(ltgt, &m_LTGT, RB0 RB1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_LTGT {
            bindings = <&m_LTGT>;
            key-positions = <14 16>;
        };

    // Layer switch
        // ZMK_COMBO(tgPlay, &tog PLY, LH1 LH0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_tgPlay {
            bindings = <&tog PLY>;
            key-positions = <37 38>;
        };

        // ZMK_COMBO(tgAdjust, &tog ADJ, RH0 RH1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_tgAdj {
            bindings = <&tog ADJ>;
            key-positions = <39 40>;
        };

        // ZMK_COMBO(smart_mouse, &smart_mouse, LT3 LT1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_smart_mouse {
            bindings = <&smart_mouse>;
            key-positions = <2 4>;
        };

        // ZMK_COMBO(mouse, &tog MOUSE, LB3 LB1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_tgMouse {
            bindings = <&tog MOUSE>;
            key-positions = <26 28>;
        };
    };

    macros {
        m_DPAR: m_Double_PAR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };

        m_DBKT: m_Doubel_BKT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };

        m_DBRC: m_Double_BRC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };

        m_LTGT: m_LT_GT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT>;
        };

        m_2esc: m_2x_esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &kp ESC>;
        };

        m_2bspc: m_2x_backspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSPC &kp BSPC>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB                     &kp Q          &kp W         &hm_l LC(LA(LS(LGUI))) E  &kp R              &kp T           &kp Y           &kp U               &hm_r RC(RA(RS(RGUI))) I  &kp O         &kp P            &mt BSLH MINUS
&mt LC(LA(LS(LGUI))) GRAVE  &hm_l LCTRL A  &hm_l LALT S  &hm_l LGUI D              &hm_lq LSHFT F     &kp G           &kp H           &hm_rq RSHFT J      &hm_r RGUI K              &hm_r RALT L  &hm_r RCTRL SQT  &kp SEMI
&mt LSHFT CAPS              &kp Z          &kp X         &kp C                     &kp V              &kp B           &kp N           &kp M               &kp COMMA                 &kp DOT       &kp FSLH         &kp GLOBE
                                                         &mt LGUI ESC              &td_NAV_bspc       &qlt FUN SPACE  &qlt FUN SPACE  &td_NUM_ret         &smart_shft
            >;
        };

        navigation_layer {
            display-name = "NAVI";
            bindings = <
&trans  &kp PG_UP  &kp HOME  &td_up    &kp END    &kp PRCNT    &kp CARET  &kp N7           &kp N8         &kp N9         &kp N0            &kp BSLH
&trans  &kp PG_DN  &td_left  &td_down  &td_right  &kp RET      &kp PLUS   &hm_rq RSHFT N4  &hm_r RGUI N5  &hm_r RALT N6  &hm_r RCTRL STAR  &kp EQUAL
&trans  &sk LCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &kp DEL      &kp MINUS  &kp N1           &kp N2         &kp N3         &kp FSLH          &trans
                            &trans     &trans     &trans       &trans     &kp KP_DOT       &trans
            >;
        };

        number_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &none           &kp N7         &kp N8         &kp N9           &trans    &none     &msc SCRL_LEFT  &msc MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_DOWN  &none
&trans  &hm_l LCTRL N0  &hm_l LALT N4  &hm_l LGUI N5  &hm_lq LSHFT N6  &trans    &mkp MB4  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mmv SCRL_UP    &none
&trans  &none           &kp N1         &kp N2         &kp N3           &trans    &mkp MB5  &mkp LCLK       &mkp MCLK       &mkp RCLK        &none           &trans
                                       &trans         &trans           &trans    &trans    &trans     &trans
            >;
        };

        function_layer {
            display-name = "FUNC";
            bindings = <
&trans  &kp LC(LA(LS(LG(N1))))          &kp LC(LA(LS(LG(N2))))         &kp LC(LA(LS(LG(N3))))  &kp LS(LG(N2))           &kp LS(LG(T))    &kp LS(LG(N4))  &kp F7     &kp F8  &kp F9  &kp F12  &none
&trans  &hm_l LCTRL LC(LA(LS(LG(O))))   &hm_l LALT LC(LA(LS(LG(P))))   &hm_l LGUI D            &hm_lq LSHFT LG(J)       &kp LG(H)        &kp LS(LG(N5))  &kp F4     &kp F5  &kp F6  &kp F11  &sk RCTRL
&trans  &kp LG(K)                       &kp LA(LS(LG(V)))              &kp LA(LG(C))           &kp LA(LG(V))            &kp LA(LG(H))    &none           &kp F1     &kp F2  &kp F3  &kp F10  &trans
                                                                       &trans                  &kp GLOBE                &trans           &trans          &kp GLOBE  &trans
            >;
        };

        player_layer {
            display-name = "PLAY";
            bindings = <
&kp C_VOL_UP  &kp E      &kp J              &kp UP    &kp L                &kp C        &none  &none  &none   &none  &tog PLY  &none
&kp C_VOL_DN  &kp R      &mt LA(LEFT) LEFT  &kp DOWN  &mt LA(RIGHT) RIGHT  &kp F        &none  &none  &none   &none  &none     &none
&kp C_MUTE    &kp COMMA  &kp DOT            &kp LT    &kp GT               &kp FSLH     &none  &none  &none   &none  &none     &none
                                            &trans    &mo PAD              &kp SPACE    &none  &none  &trans
            >;
        };

        keypad_layer {
            display-name = "PAD";
            bindings = <
&trans  &none            &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_N0       &none  &none  &none   &none  &none  &none
&trans  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS     &none  &none  &none   &none  &none  &none
&trans  &kp KP_SLASH     &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_MINUS    &none  &none  &none   &none  &none  &none
                                    &trans     &trans     &trans          &none  &none  &trans
            >;
        };

        mouse_layer {
            display-name = "MOUSE";
            bindings = <
&none  &msc SCRL_DOWN  &msc SCRL_LEFT  &msc MOVE_UP    &msc SCRL_RIGHT  &none        &none      &msc SCRL_LEFT  &msc MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_DOWN  &none
&none  &mmv SCRL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB4     &mkp MB4   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mmv SCRL_UP    &none
&none  &none           &none           &mkp MCLK       &none            &mkp MB5     &mkp MB5   &none           &none           &none            &none           &none
                                       &tog MOUSE      &mkp LCLK        &mkp RCLK    &mkp MCLK  &mkp LCLK       &mkp RCLK
            >;
        };

        adjust_layer {
            display-name = "ADJUST";
            bindings = <
&tog ADJ  &bt BT_SEL 0    &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4    &out OUT_BLE  &out OUT_USB     &none            &none            &none            &tog ADJ
&none     &bt BT_CLR      &ext_power EP_ON   &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &bootloader     &bootloader   &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &none
&none     &bt BT_CLR_ALL  &ext_power EP_OFF  &rgb_ug RGB_OFF  &rgb_ug RGB_EFR  &sys_reset      &sys_reset    &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &none
                                             &none            &none            &none           &none         &none            &none
            >;
        };
    };
};
