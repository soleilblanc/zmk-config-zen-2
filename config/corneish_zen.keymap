/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// Define layer numbers
#define DEF 0
#define COL 1
#define NAV 2
#define NUM 3
#define FUN 4
#define GAM 5
#define MED 6
#define PAD 7
#define MOUSE 8
#define ADJ 9

// ZMK includes
#include <behaviors.dtsi>
// #include <behaviors/num_word.dtsi>          // Urob's feature from dhruvinsh
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include "zmk-helpers/helper.h"             // Urob's features
#include "zmk-helpers/key-labels/42.h"      // Urob's features
// #include "combos.dtsi"                      // separate personal combos
#include "mouse.dtsi"                       // Urob's features
#include <dt-bindings/zmk/mouse.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

// ───────────────────────────────────────────────── Global settings ─────────────────────────────────────────────────
    #define QUICK_TAP_MS 175

    #define COMBO_TERM_FAST 35
    #define COMBO_TERM_SLOW 50

    #define COMBO_IDLE_FAST 150
    #define COMBO_IDLE_SLOW 50

    // #define HYP(keycode) &kp LC(LA(LS(LG(keycode))))
    // #define MEH(keycode) &kp LC(LA(LS(keycode)))

    /*
    &sk {  // sticky-key config
        release-after-ms = <900>;  // release after 0.6s
        quick-release;             // no double capitalization when rolling keys
    };
    */

    &sl {  // sticky-layer config
        ignore-modifiers;          // allow chording sticky mods & layers
    };

    /*
    &lt {  // layer-tap config
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <QUICK_TAP_MS>;
    };
    */
// ───────────────────────────────────────────────── END Global settings ─────────────────────────────────────────────────

    #define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4   // left hand
    #define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4   // right hand
    #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                       // thumbs

// ───────────────────────────────────────────────── urob's Homerow-Mods ─────────────────────────────────────────────────
    /*
    #define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
        ZMK_HOLD_TAP(NAME, \
            flavor = "balanced"; \
            tapping-term-ms = <280>; \
            quick-tap-ms = <QUICK_TAP_MS>; \
            require-prior-idle-ms = <150>; \
            bindings = <HOLD>, <TAP>; \
            hold-trigger-key-positions = <TRIGGER_POS>; \
            hold-trigger-on-release; \
        )
    MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
    MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

    MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
    MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
    MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "
    */
// ───────────────────────────────────────────────── END urob's Homerow-Mods ─────────────────────────────────────────────────

// ───────────────────────────────────────────────── ZMK helper behaviors ─────────────────────────────────────────────────
    /* Caps-word, num-word and smart-mouse */
    /*
    // tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
    ZMK_MOD_MORPH(smart_shft,
        bindings = <&sk LSHFT>, <&caps_word>;
        mods = <(MOD_LSFT)>;
    )
    
    &caps_word {  // mods deactivate caps-word, requires PR #1451
        /delete-property/ ignore-modifiers;
    };
    */

    /* 
    // tap: num-word | double-tap: sticky num-layer | hold: num-layer
    #define SMART_NUM &smart_num NUM 0
    ZMK_HOLD_TAP(smart_num,
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <QUICK_TAP_MS>;
        bindings = <&mo>, <&num_dance>;
    )
    ZMK_TAP_DANCE(num_dance,
        tapping-term-ms = <200>;
        bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
    )
    */
    &num_word {  // num-word, requires PR #1451
        layers = <NUM>;
        continue-list = <BSPC DEL DOT KP_DOT COMMA PLUS MINUS STAR FSLH EQUAL CARET PRCNT UP DOWN LEFT RIGHT>;
    };

    /*
    // smart-mouse, requires PR #1366
    ZMK_TRI_STATE(smart_mouse,
        bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
        ignored-key-positions = <LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB2 LH0 LH1 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RH0 RH1 RH2>;
        ignored-layers = <MOUSE>;
    )
    */
// ───────────────────────────────────────────────── END ZMK helper behaviors ─────────────────────────────────────────────────

/ {
    behaviors {
// ───────────────────────────────────────────────── Smart-shift, Caps-word, num-word and other-word ─────────────────────────────────────────────────
        // tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        nav_word: nav_word {
            #binding-cells = <0>;
            compatible = "zmk,behavior-caps-word";
            layers = <NAV>;
            continue-list = <BSPC DEL DOT KP_DOT COMMA PLUS MINUS STAR FSLH EQUAL CARET PRCNT UP DOWN LEFT RIGHT>;
            ignore-numbers;
        };

        /* 
        mm_ret_sNum: enter_smartNumber {
           compatible = "zmk,behavior-mod-morph";
           #binding-cells = <0>;
           bindings = <&kp RET>, <&num_word>;
           mods = <(MOD_LSFT)>;
        };
        */
// ───────────────────────────────────────────────── END Smart-shift, Caps-word, num-word and other-word ─────────────────────────────────────────────────

// ───────────────────────────────────────────────── Tap Dance ─────────────────────────────────────────────────
    // layer
        /*
        td_NAV_bspc: td_NAV_bspc_nWord {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&ltb NAV BSPC>, <&num_word>;
            tapping-term-ms = <220>;
        };
        */

        /*
        td_NUM_ret: td_NUM_enter_nvWord {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&ltb NUM RET>, <&nav_word>;
            tapping-term-ms = <220>;
        };
        */

        /*
        td_cmd_fn: td_cmd_fn {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp RGUI>, <&kp INS>;
            tapping-term-ms = <250>;
        };
        */

        /*
        td_cmd_esc: td_cmd_esc_PAD {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt LGUI ESC>, <&mo PAD>;
            tapping-term-ms = <250>;
        };
        */

    // arrows, arrows with modifier
        td_up: td_up {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&mt LG(UP) LA(UP_ARROW)>;

            tapping-term-ms = <250>;
        };

        td_left: td_left {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&mt LG(LEFT) LA(LEFT)>;

            tapping-term-ms = <250>;
        };

        td_down: td_down {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&mt LG(DOWN) LA(DOWN)>;

            tapping-term-ms = <250>;
        };

        td_right: td_right {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&mt LG(RIGHT) LA(RIGHT)>;

            tapping-term-ms = <250>;
        };

    // symbols
        td_DPAR: td_Doubel_PAR {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RPAR LPAR>, <&m_DPAR>;
        };

        td_DBKT: td_Double_BKT {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RBKT LBKT>, <&m_DBKT>;
        };

        td_DBRC: td_Double_BRC {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RBRC LBRC>, <&m_DBRC>;
        };

        td_LTGT: td_LTGT {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt GT LT>, <&m_LTGT>;
        };

// ───────────────────────────────────────────────── END Tap Dance ─────────────────────────────────────────────────

// ───────────────────────────────────────────────── Hold-tap ─────────────────────────────────────────────────
    // define new behavior
        //  change flavor to balanced
        ltb: ltb {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };

        //  hold to layer, quickly tap-tap holding to output key
        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <200>;
        };

        //  hold to momentary layer, tap to sticky layer
        mosl: mosl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&sl>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            // quick-tap-ms = <200>;
        };

        //  hold to momentary layer, tap to smart-media
        mo_sMED: mo_sMED {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&smart_media>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            // quick-tap-ms = <200>;
        };

    // infused-kim's Homerow-Mods
        hml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;          // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;                // delay positional check until key-release
        };

        hmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hmlq: hm_left_quick {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
            // hold-trigger-on-release;
        };

        hmrq: hm_right_quick {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            // hold-trigger-on-release;
        };

    // Homerow-Mods for Combos
        hml_sMED: homerow_mod_smartMedia {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&smart_media>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };


// ───────────────────────────────────────────────── END Hold-tap ─────────────────────────────────────────────────

// ───────────────────────────────────────────────── Tri-State, Smart Layer, Swapper ─────────────────────────────────────────────────
        smart_mouse: smart_mouse {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
            ignored-key-positions = <1 2 3 4 7 8 9 10 13 14 15 16 17 18 19 20 21 22 27 29 30 36 37 38 39 40 41>;
            ignored-layers = <MOUSE>;
        };

        smart_media: smart_media {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&tog MED>, <&none>, <&tog MED>;
            ignored-key-positions = <KEYS_L LH0 LH1 KEYS_R RH1 RH2>;
            ignored-layers = <MED>;
        };

    // cmd_tab swapper
        swapper_tab: swapper_tab {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <0 12>;
        };

    };
// ───────────────────────────────────────────────── END Tri-State, Smart Layer, Swapper ─────────────────────────────────────────────────

// ───────────────────────────────────────────────── Combos ─────────────────────────────────────────────────
    combos {
        compatible = "zmk,combos";
    // left hand: horizontal
        // ZMK_COMBO(tab, &kp TAB, LT3 LT2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_tab {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // ZMK_COMBO(grave, &kp GRAVE, LM3 LM2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_grave {
            bindings = <&hml LA(LGUI) GRAVE>;
            key-positions = <14 15>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // ZMK_COMBO(tilde, &kp TILDE, LM4 LM3, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_tilde {
            bindings = <&hml LC(LALT) TILDE>;
            key-positions = <13 14>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // ZMK_COMBO(repeat, &key_repeat, LT2 LT1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_repeat {
            bindings = <&key_repeat>;
            key-positions = <3 4>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // ZMK_COMBO(L_enter, &kp RET, LM2 LM1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_L_enter {
            bindings = <&hml LG(LSHFT) RET>;
            key-positions = <15 16>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // ZMK_COMBO(L_equal, &kp EQUAL, LB4 LB3, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_L_equal {
            bindings = <&kp EQUAL>;
            key-positions = <25 26>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // ZMK_COMBO(L_minus, &kp MINUS, LB3 LB2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_L_minus {
            bindings = <&kp MINUS>;
            key-positions = <26 27>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // ZMK_COMBO(L_under, &kp UNDER, LB2 LB1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_L_under {
            bindings = <&kp UNDER>;
            key-positions = <27 28>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

    // left hand: vertical
        //ZMK_COMBO(excl_qmark, &mt EXCL QMARK, LT4 LM4, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_excl_qmark {
            bindings = <&mt EXCL QMARK>;
            key-positions = <1 13>;
        };

        //ZMK_COMBO(amps_at, &mt AMPS AT, LT3 LM3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_amps_at {
            bindings = <&mt AMPS AT>;
            key-positions = <2 14>;
        };

        //ZMK_COMBO(star_hash, &mt STAR HASH, LT2 LM2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_star_hash {
            bindings = <&mt STAR HASH>;
            key-positions = <3 15>;
        };

        //ZMK_COMBO(JPY_dllr, &mt LA(Y) DLLR, LT1 LM1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_JPY_dollar {
            bindings = <&mt LA(Y) DLLR>;
            key-positions = <4 16>;
        };

        //ZMK_COMBO(caret_prcnt, &mt CARET PRCNT, LT0 LM0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_caret_prcnt {
            bindings = <&mt CARET PRCNT>;
            key-positions = <5 17>;
        };

        //ZMK_COMBO(semi_comma, &mt SEMICOLON COMMA, LM3 LB3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_semi_comma {
            bindings = <&mt SEMICOLON COMMA>;
            key-positions = <14 26>;
        };

        //ZMK_COMBO(colon_dot, &mt COLON DOT, LM2 LB2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_colon_dot {
            bindings = <&mt COLON DOT>;
            key-positions = <15 27>;
        };

        //ZMK_COMBO(dqt_sqt, &mt DQT SQT, LM1 LB1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_dqt_sqt {
            bindings = <&mt DQT SQT>;
            key-positions = <16 28>;
        };

        //ZMK_COMBO(L_pipe, &kp PIPE, LM0 LB0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_L_pipe {
            bindings = <&kp PIPE>;
            key-positions = <17 29>;
        };

    // left hand: diagonal
        // ZMK_COMBO(L_fslh, &kp FSLH, LT2 LM3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_L_fslh {
            bindings = <&kp FSLH>;
            key-positions = <3 14>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        // ZMK_COMBO(L_bslh, &kp BSLH, LT2 LM1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_L_bslh {
            bindings = <&kp BSLH>;
            key-positions = <3 16>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        // ZMK_COMBO(prevTab, &kp LT, LM2 LB3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_prevTab {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <15 26>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        // ZMK_COMBO(nextTab, &kp GT, LM2 LB1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_nextTab {
            bindings = <&kp LC(TAB)>;
            key-positions = <15 28>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

    // right hand: horizontal
        // ZMK_COMBO(R_enter, &kp RET, RM1 RM2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_R_enter {
            bindings = <&hmr RS(RGUI) RET>;
            key-positions = <19 20>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // ZMK_COMBO(R_equal, &kp EQUAL, RM3 RM4, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_R_equal {
            bindings = <&hmr RA(RCTRL) EQUAL>;
            key-positions = <21 22>;
            // timeout-ms = <COMBO_TERM_FAST>;
            // require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // ZMK_COMBO(R_under, &kp UNDER, RB1 RB2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_R_under {
            bindings = <&kp UNDER>;
            key-positions = <31 32>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // ZMK_COMBO(R_pipe, &kp PIPE, RB2 RB3, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_R_pipe {
            bindings = <&kp PIPE>;
            key-positions = <32 33>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

    // right hand: vertical
        // ZMK_COMBO(R_caret, &kp CARET, RT0 RM0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        // ZMK_COMBO(R_plus, &kp PLUS, RT1 RM1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_plus {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
        };

        // ZMK_COMBO(R_star, &kp STAR, RT2 RM2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_star {
            bindings = <&kp STAR>;
            key-positions = <8 20>;
        };

        // ZMK_COMBO(R_amps, &kp AMPS, RT3 RM3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_amps {
            bindings = <&kp AMPS>;
            key-positions = <9 21>;
        };

        // ZMK_COMBO(R_minus, &kp MINUS, RM1 RB1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_minus {
            bindings = <&kp MINUS>;
            key-positions = <19 31>;
        };

        // ZMK_COMBO(R_fslh, &kp FSLH, RM2 RB2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_fslh {
            bindings = <&kp FSLH>;
            key-positions = <20 32>;
        };

        // ZMK_COMBO(R_bslh, &kp BSLH, RM3 RB3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_R_bslh {
            bindings = <&kp BSLH>;
            key-positions = <21 33>;
        };

    // functional
        // ZMK_COMBO(bkfw, &mt LG(RBKT) LG(LBKT), LT5 LT4, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_BackForward {
            bindings = <&mt LG(RBKT) LG(LBKT)>;
            key-positions = <1 2>;
        };

        // ZMK_COMBO(dbrc, &td_DBRC, LT1 LT0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_dBRC {
            bindings = <&td_DBRC>;
            key-positions = <4 5>;
        };

        // ZMK_COMBO(dpar, &td_DPAR, LM1 LM0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_dPAR {
            bindings = <&td_DPAR>;
            key-positions = <16 17>;
        };

        // ZMK_COMBO(LTGT, &LTGT, RM1 RB0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
        cb_LTGT {
            bindings = <&td_LTGT>;
            key-positions = <16 29>;
        };

        // ZMK_COMBO(dbkt, &td_DBKT, LB1 LB0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_dBKT {
            bindings = <&td_DBKT>;
            key-positions = <28 29>;
        };

    // Layer switch
        // ZMK_COMBO(tgCOL, &tog COL, LT3 LM4, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_tgCOL {
            bindings = <&tog COL>;
            key-positions = <2 13>;
        };

        // ZMK_COMBO(tgGAM, &tog GAM, LT1 LM0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_tgGAM {
            bindings = <&tog GAM>;
            key-positions = <4 17>;
        };

        // ZMK_COMBO(tgADJ, &tog ADJ, RT3 RM4, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_tgADJ {
            bindings = <&tog ADJ>;
            key-positions = <9 22>;
        };

        // ZMK_COMBO(smart_mouse, &smart_mouse, LT3 LT1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_smart_mouse {
            bindings = <&smart_mouse>;
            key-positions = <2 4>;
        };

        // ZMK_COMBO(smart_media, &smart_media, LM3 LM1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_smart_media {
            bindings = <&hml_sMED LA(LSHFT) 0>;
            key-positions = <14 16>;
        };

        // ZMK_COMBO(nWord, &num_word, LB3 LB1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_nvWord {
            bindings = <&num_word>;
            key-positions = <26 28>;
        };

        // ZMK_COMBO(nvWord, &nav_word, RB1 RB3, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
        cb_nWord {
            bindings = <&nav_word>;
            key-positions = <31 33>;
        };
    };
// ───────────────────────────────────────────────── END Combos ─────────────────────────────────────────────────

    macros {
        m_DPAR: m_Double_PAR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };

        m_DBKT: m_Doubel_BKT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };

        m_DBRC: m_Double_BRC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };

        m_LTGT: m_LT_GT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT>;
        };

        // holding layer and key
        m_MED_fn: m_MED_fn {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <1>;
            #binding-cells = <0>;
            bindings = <&macro_press &mo MED &kp INS>
                     , <&macro_pause_for_release>
                     , <&macro_release &mo MED &kp INS>;
        };

        // holding FN key and tap
        fk: fk {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <1>;
            #binding-cells = <1>;
            bindings = <&macro_press &kp INS>
                     , <&macro_param_1to1>
                     , <&macro_press &kp MACRO_PLACEHOLDER>
                     , <&macro_pause_for_release>
                     , <&macro_param_1to1>
                     , <&macro_release &kp MACRO_PLACEHOLDER>
                     , <&macro_release &kp INS>;
        };

        // holding FN key and tap
        fk2: fk2 {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_tap_time 200>
                     , <&macro_press &kp INS>
                     , <&macro_tap_time 10>
                     , <&macro_param_1to1>
                     , <&macro_press &kp MACRO_PLACEHOLDER>
                     , <&macro_pause_for_release>
                     , <&macro_param_1to1>
                     , <&macro_release &kp MACRO_PLACEHOLDER>
                     , <&macro_release &kp INS>;
        };

        /*
        m_2esc: m_2x_esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &kp ESC>;
        };

        m_2bspc: m_2x_backspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSPC &kp BSPC>;
        };
        */
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB                     &kp Q          &kp W         &hml LC(LA(LS(LGUI))) E  &kp R              &kp T               &kp Y          &kp U          &hmr RC(RA(RS(RGUI))) I   &kp O         &kp P            &mt BSLH MINUS
&mt LC(LA(LS(LGUI))) GRAVE  &hml LCTRL A   &hml LALT S   &hml LGUI D              &hmlq LSHFT F      &kp G               &kp H          &hmrq RSHFT J  &hmr RGUI K               &hmr RALT L  &hmr RCTRL SQT   &mt LC(LA(LSHFT)) SEMI
&mt LSHFT CAPS              &kp Z          &kp X         &hml LC(LA(LSHFT)) C     &kp V              &kp B               &kp N          &kp M          &hmr LC(LA(LSHFT)) COMMA  &kp DOT       &kp FSLH         &kp INS
                                                         &mt LGUI ESC             &ltb NAV BSPC      &ltq FUN SPACE      &mosl FUN FUN  &ltb NUM RET   &smart_shft
            >;
        };

        colemak_layer {
            display-name = "ARSTGM";
            bindings = <
&trans  &trans  &trans       &hml LC(LA(LS(LGUI))) F  &kp P          &kp B       &kp J   &kp L          &hmr RC(RA(RS(RGUI))) U  &kp Y        &kp SQT       &trans
&trans  &trans  &hml LALT R  &hml LGUI S              &hmlq LSHFT T  &trans      &kp M   &hmrq RSHFT N  &hmr RGUI E              &hmr RALT I  &hmr RCTRL O  &trans
&trans  &trans  &trans       &trans                   &kp D          &kp V       &kp K   &kp H          &trans                   &trans       &trans        &trans
                             &trans                   &trans         &trans      &trans  &trans         &trans
            >;
        };

        navigation_layer {
            display-name = "NAVI";
            bindings = <
&trans  &kp PG_UP  &kp HOME  &td_up    &kp END    &kp PRCNT      &kp CARET  &kp N7          &hmr RC(RA(RS(RGUI))) N8  &kp N9        &kp N0           &kp BSLH
&trans  &kp PG_DN  &td_left  &td_down  &td_right  &kp RET        &kp PLUS   &hmrq RSHFT N4  &hmr RGUI N5              &hmr RALT N6  &hmr RCTRL STAR  &mt LC(LA(LSHFT)) EQUAL
&trans  &sk LCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &kp DEL        &kp MINUS  &kp N1          &hmr LC(LA(LSHFT)) N2     &kp N3        &kp FSLH         &trans
                            &trans     &trans     &trans         &trans     &kp KP_DOT      &trans
            >;
        };

        number_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &none          &kp N7        &kp N8        &kp N9          &none       &none     &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_DOWN  &none
&trans  &hml LCTRL N0  &hml LALT N4  &hml LGUI N5  &hmlq LSHFT N6  &trans      &mkp MB4  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP    &trans
&trans  &none          &kp N1        &kp N2        &kp N3          &trans      &mkp MB5  &mkp LCLK       &mkp MCLK       &mkp RCLK        &none           &trans
                                     &trans        &trans          &trans      &trans    &ltb NUM RET    &trans
            >;
        };

        function_layer {
            display-name = "FUNC";
            bindings = <
&trans  &kp LC(LS(TAB))               &kp LC(TAB)                  &kp LS(LG(N4))        &kp LS(LG(N2))     &kp LS(LG(T))      &kp LC(F2)    &kp C_PREV    &kp C_PP      &kp C_NEXT  &kp C_VOL_UP  &none
&trans  &hml LCTRL LC(LA(LS(LG(J))))  &hml LALT LC(LA(LS(LG(K))))  &hml LGUI LS(LG(N5))  &hmlq LSHFT LG(J)  &kp LG(H)          &kp LC(F3)    &fk2 F4       &fk F5        &fk F6      &kp C_VOL_DN  &none
&trans  &kp LG(K)                     &kp LA(LS(LG(V)))            &kp LA(LG(C))         &kp LA(LG(V))      &kp LA(LG(H))      &none         &kp C_BRI_DN  &kp C_BRI_UP  &fk F3      &kp C_MUTE    &trans
                                                                   &trans                &trans             &trans             &mo_sMED MED  &trans      &trans
            >;
        };

        gaming_layer {
            display-name = "GAMING";
            bindings = <
&trans  &kp N3  &kp Q  &kp W   &kp E     &kp N6      &kp Y   &kp U          &hmr RC(RA(RS(RGUI))) I      &kp O        &kp P           &mt BSLH MINUS
&trans  &kp N2  &kp A  &kp S   &kp D     &kp N5      &kp H   &hmrq RSHFT J  &hmr RGUI K                  &hmr RALT L  &hmr RCTRL SQT  &mt LC(LA(LSHFT)) SEMI
&trans  &kp N1  &kp Z  &kp X   &kp C     &kp N4      &kp N   &kp M          &hmr RC(RA(RS(RGUI))) COMMA  &kp DOT      &kp FSLH        &trans
                       &trans  &kp LALT  &trans      &trans  &trans         &trans
            >;
        };

        media_layer {
            display-name = "MEDIA";
            bindings = <
&kp C_VOL_UP  &kp E      &kp J              &kp UP    &kp L                &kp C        &none  &kp F7   &kp F8   &kp F9  &kp F12  &none
&kp C_VOL_DN  &kp R      &mt LA(LEFT) LEFT  &kp DOWN  &mt LA(RIGHT) RIGHT  &kp F        &none  &kp F4   &kp F5   &kp F6  &kp F11  &sk RCTRL
&kp C_MUTE    &kp COMMA  &kp DOT            &kp LT    &kp GT               &kp FSLH     &none  &kp F1   &kp F2   &kp F3  &kp F10  &trans
                                            &trans    &mo PAD              &kp SPACE    &none  &sk INS  &trans
            >;
        };

        keypad_layer {
            display-name = "PAD";
            bindings = <
&trans  &none            &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_N0       &none   &none  &none   &none  &none  &none
&trans  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS     &none   &none  &none   &none  &none  &none
&trans  &kp KP_SLASH     &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_MINUS    &none   &none  &none   &none  &none  &none
                                    &trans     &trans     &trans          &trans  &none  &trans
            >;
        };

        mouse_layer {
            display-name = "MOUSE";
            bindings = <
&none  &msc SCRL_DOWN  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &none        &none      &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_DOWN  &none
&none  &msc SCRL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB4     &mkp MB4   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP    &none
&none  &none           &none           &mkp MCLK       &none            &mkp MB5     &mkp MB5   &none           &none           &none            &none           &none
                                       &tog MOUSE      &mkp LCLK        &mkp RCLK    &mkp MCLK  &mkp LCLK       &mkp RCLK
            >;
        };

        adjust_layer {
            display-name = "ADJUST";
            bindings = <
&none  &bt BT_SEL 0    &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4    &out OUT_BLE  &out OUT_USB     &none            &none            &none            &none
&none  &bt BT_CLR      &ext_power EP_ON   &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &bootloader     &bootloader   &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &none
&none  &bt BT_CLR_ALL  &ext_power EP_OFF  &rgb_ug RGB_OFF  &rgb_ug RGB_EFR  &sys_reset      &sys_reset    &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &none
                                          &none            &none            &none           &none         &none            &none
            >;
        };
    };
};
