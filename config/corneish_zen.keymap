/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// Define layer numbers

#define DEF 0
#define NUM 1
#define SYM 2
#define FUN 3
#define PLY 4
#define PAD 5
#define MOUSE 6
#define ADJ 7

// ZMK includes
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// Personal includes
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"
// #include "includes/kim_homerow_mods.dtsi"
// #include "includes/urob_homerow_mods.dtsi"
// #include "includes/combos.dtsi"
#include "includes/mouse.dtsi"

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4   // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4   // right hand
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2                                       // thumbs

/* ZMK helper behaviors */
/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL CARET PRCNT>;
};

// smart-mouse, requires PR #1366
ZMK_TRI_STATE(smart_mouse,
    bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions = <LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB2 LH0 LH1 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RH0 RH1 RH2>;
    ignored-layers = <MOUSE>;
)


/ {
    behaviors {
        // functional

        td_Sh_Cp_Hy: td_shift_caps_hyper {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt LEFT_SHIFT CAPS>, <&kp LC(LA(LS(LGUI)))>;

            tapping-term-ms = <250>;
        };

        td_FUN_Sp_Sp: td_layerFUN_space_space {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt FUN SPACE>, <&kp SPACE>;

            tapping-term-ms = <250>;
        };

        td_cmd_PAD: td_cmd_layerPAD {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LGUI>, <&mo PAD>;

            tapping-term-ms = <250>;
        };

        td_cmd_fn: td_cmd_fn {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp RGUI>, <&kp INS>;

            tapping-term-ms = <250>;
        };

        td_up: td_up {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&mt LG(UP) LA(UP_ARROW)>;

            tapping-term-ms = <250>;
        };

        td_left: td_left {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&mt LG(LEFT) LA(LEFT)>;

            tapping-term-ms = <250>;
        };

        td_down: td_down {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&mt LG(DOWN) LA(DOWN)>;

            tapping-term-ms = <250>;
        };

        td_right: td_right {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&mt LG(RIGHT) LA(RIGHT)>;

            tapping-term-ms = <250>;
        };

        //  double symbols

        td_DPAR: td_Doubel_PAR {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RPAR LPAR>, <&m_DPAR>;
        };

        td_DBKT: td_Double_BKT {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RBKT LBKT>, <&m_DBKT>;
        };

        td_DBRC: td_Double_BRC {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RBRC LBRC>, <&m_DBRC>;
        };

        //  hold to layer, quick tap twice and hold to key

        qht: quick_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
        };

        //  infused-kim's Homerow Mod

        hm_l: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;               // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
            hold-trigger-on-release;            // delay positional check until key-release
        };

        hm_r: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hm_lq: hm_left_quick {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hm_rq: hm_right_quick {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        /* horizontal key - left hand */
        // ZMK_COMBO(tab, &kp TAB, LT3 LT2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_tab {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
        };

        // ZMK_COMBO(esc, &kp ESC, LT2 LT1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_esc {
            bindings = <&kp ESC>;
            key-positions = <3 4>;
        };

        // ZMK_COMBO(toast, &kp LG(BSPC), LT3 LT1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_Toast {
            bindings = <&kp LG(BSPC)>;
            key-positions = <2 4>;
        };

        // ZMK_COMBO(tilde, &kp TILDE, LM4 LM3, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_tilde {
            bindings = <&kp TILDE>;
            key-positions = <13 14>;
        };

        // ZMK_COMBO(grave, &kp GRAVE, LM3 LM2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_grave {
            bindings = <&kp GRAVE>;
            key-positions = <14 15>;
        };

        // ZMK_COMBO(enter, &kp RET, LM2 LM1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_L_enter {
            bindings = <&kp RET>;
            key-positions = <15 16>;
        };

        // ZMK_COMBO(repeat, &key_repeat, LM3 LM2 LM1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_KeyRepeat {
            bindings = <&key_repeat>;
            key-positions = <14 15 16>;
        };

        // ZMK_COMBO(qmark, &kp QMARK, LB3 LB2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_L_qmark {
            bindings = <&kp QMARK>;
            key-positions = <26 27>;
        };

        // ZMK_COMBO(pipe, &kp PIPE, LB2 LB1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_L_pipe {
            bindings = <&kp PIPE>;
            key-positions = <27 28>;
        };

        // ZMK_COMBO(mouse, &smart_mouse, LB2 LB1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_mouse {
            bindings = <&smart_mouse>;
            key-positions = <26 28>;
        };

        /* vertical key - left hand */
        //ZMK_COMBO(at, &kp AT, LT3 LM3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_L_at {
            bindings = <&kp AT>;
            key-positions = <2 14>;
        };

        //ZMK_COMBO(hash, &kp HASH, LT2 LM2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_L_hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        //ZMK_COMBO(dllr, &kp DLLR, LT1 LM1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_L_dollar {
            bindings = <&kp DLLR>;
            key-positions = <4 16>;
        };

        //ZMK_COMBO(prcnt, &kp PRCNT, LT0 LM0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_L_percent {
            bindings = <&kp PRCNT>;
            key-positions = <5 17>;
        };

        //ZMK_COMBO(excl, &kp EXCL, LM3 LB3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_L_excl {
            bindings = <&kp EXCL>;
            key-positions = <14 26>;
        };

        //ZMK_COMBO(star, &kp STAR, LM2 LB2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_L_star {
            bindings = <&kp STAR>;
            key-positions = <15 27>;
        };

        //ZMK_COMBO(amps, &kp AMPS, LM1 LB1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_L_amps {
            bindings = <&kp AMPS>;
            key-positions = <16 28>;
        };

        //ZMK_COMBO(caret, &kp CARET, LM0 LB0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_L_caret {
            bindings = <&kp CARET>;
            key-positions = <17 29>;
        };

        /* incline key - left hand */
        // ZMK_COMBO(fslh, &kp FSLH, LM2 LB3, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_L_fslh {
            bindings = <&kp FSLH>;
            key-positions = <15 26>;
        };

        // ZMK_COMBO(bslh, &kp BSLH, LM2 LB1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_L_bslh {
            bindings = <&kp BSLH>;
            key-positions = <15 28>;
        };

        /* horizontal key - right hand */
        // ZMK_COMBO(jpy, &kp LA(Y), RT1 RT2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_JPY {
            bindings = <&kp LA(Y)>;
            key-positions = <7 8>;
        };

        // ZMK_COMBO(r_enter, &kp RET, RM1 RM2 RM3, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_R_enter {
            bindings = <&kp RET>;
            key-positions = <19 20 21>;
        };

        // ZMK_COMBO(r_under, &kp UNDER, RB1 RB2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_R_Under {
            bindings = <&kp UNDER>;
            key-positions = <31 32>;
        };

        /* vertical key - right hand */
        //ZMK_COMBO(r_caret, &kp CARET, RT0 RM0, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_R_caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        //ZMK_COMBO(r_plus, &kp PLUS, RT1 RM1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_R_plus {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
        };

        //ZMK_COMBO(r_minus, &kp MINUS, RM1 RB1, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_R_minus {
            bindings = <&kp MINUS>;
            key-positions = <19 31>;
        };

        //ZMK_COMBO(r_star, &kp STAR, RT2 RM2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_R_star {
            bindings = <&kp STAR>;
            key-positions = <8 20>;
        };

        //ZMK_COMBO(r_fslh, &kp FSLH, RM2 RB2, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_R_fslh {
            bindings = <&kp FSLH>;
            key-positions = <20 32>;
        };

        //ZMK_COMBO(r_fslh, &kp FSLH, RT3 RM3, ALL, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

        cb_R_amps {
            bindings = <&kp AMPS>;
            key-positions = <9 21>;
        };

        /* functional */
        // ZMK_COMBO(bkfw, &&mt LG(RBKT) LG(LBKT), LT5 LT4, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_BackForward {
            bindings = <&mt LG(RBKT) LG(LBKT)>;
            key-positions = <1 2>;
        };

        // ZMK_COMBO(dbrc, &td_DBRC, LT1 LT0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_DoubleBRC {
            bindings = <&td_DBRC>;
            key-positions = <4 5>;
        };

        // ZMK_COMBO(dpar, &td_DPAR, LM1 LM0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_DoublePAR {
            bindings = <&td_DPAR>;
            key-positions = <16 17>;
        };

        // ZMK_COMBO(dbkt, &td_DBKT, LB1 LB0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_DoubleBKT {
            bindings = <&td_DBKT>;
            key-positions = <28 29>;
        };

        // ZMK_COMBO(ltgt, &m_LTGT, RB0 RB1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_LTGT {
            bindings = <&m_LTGT>;
            key-positions = <30 31>;
        };

        // Layer switch
        // ZMK_COMBO(togPLAY, &tog PLY, LH1 LH0, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_TogPlay {
            bindings = <&tog PLY>;
            key-positions = <37 38>;
        };

        // ZMK_COMBO(togADJUST, &tog ADJ, RH0 RH1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_TogAdj {
            bindings = <&tog ADJ>;
            key-positions = <39 40>;
        };

        // ZMK_COMBO(capsword, &caps_word, LM1 RM1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

        cb_CapsWord {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };
    };

    macros {
        m_DPAR: m_Double_PAR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };

        m_DBKT: m_Doubel_BKT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };

        m_DBRC: m_Double_BRC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };

        m_LTGT: m_LT_GT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB                     &kp Q          &kp W         &hm_l LC(LA(LS(LGUI))) E  &kp R           &kp T           &kp Y        &kp U           &hm_r RC(RA(RS(RGUI))) I  &kp O         &kp P            &mt BSLH MINUS
&mt LC(LA(LS(LGUI))) GRAVE  &hm_l LCTRL A  &hm_l LALT S  &hm_l LGUI D              &hm_lq LSHFT F  &kp G           &kp H        &hm_rq RSHFT J  &hm_r RGUI K              &hm_r RALT L  &hm_r RCTRL SQT  &kp SEMI
&mt LSHFT CAPS              &kp Z          &kp X         &kp C                     &kp V           &kp B           &kp N        &kp M           &kp COMMA                 &kp DOT       &kp FSLH         &td_cmd_fn
                                                         &td_cmd_PAD               &lt NUM BSPC    &qht FUN SPACE  &lt FUN RET  &lt SYM DEL     &kp RSHFT
            >;
        };

        number_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &kp HOME   &kp PG_UP  &kp PAGE_DOWN  &kp END    &kp PRCNT    &kp CARET  &kp N7           &kp N8         &kp N9         &kp N0            &kp BSPC
&trans  &td_left   &td_down   &td_up         &td_right  &kp RET      &kp PLUS   &hm_rq RSHFT N4  &hm_r RGUI N5  &hm_r RALT N6  &hm_r RCTRL STAR  &trans
&trans  &sk LCTRL  &sk LALT   &sk LGUI       &sk LSHFT  &kp DEL      &kp MINUS  &kp N1           &kp N2         &kp N3         &kp FSLH          &kp EQUAL
                              &trans         &trans     &trans       &trans     &kp KP_DOT       &trans
            >;
        };

        symbol_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL           &kp AT           &kp HASH         &kp DLLR           &kp PRCNT    &kp PLUS   &kp HOME   &kp PG_UP  &kp PG_DN  &kp END    &trans
&trans  &hm_l LCTRL CARET  &hm_l LALT AMPS  &hm_l LGUI STAR  &hm_lq LSHFT LPAR  &kp RPAR     &kp PIPE   &td_left   &td_down   &td_up     &td_right  &kp COLON
&trans  &none              &none            &none            &kp LBRC           &kp RBRC     &kp UNDER  &kp TILDE  &kp LT     &kp GT     &kp QMARK  &kp DQT
                                            &trans           &trans             &trans       &trans     &trans     &trans
            >;
        };

        function_layer {
            display-name = "FUNC";
            bindings = <
&none      &kp LC(LA(LS(LG(N1))))  &kp LC(LA(LS(LG(N2))))  &kp LC(LA(LS(LG(N3))))  &kp LS(LG(N2))  &kp LS(LG(T))    &kp LS(LG(N4))  &kp F7   &kp F8  &kp F9  &kp F12  &none
&sk LALT   &kp LC(LA(LS(LG(O))))   &kp LC(LA(LS(LG(P))))   &none                   &kp LG(J)       &kp LG(H)        &kp LS(LG(N5))  &kp F4   &kp F5  &kp F6  &kp F11  &sk RCTRL
&sk LSHFT  &kp LG(K)               &kp LA(LS(LG(V)))       &kp LA(LG(C))           &kp LA(LG(V))   &kp LA(LG(H))    &none           &kp F1   &kp F2  &kp F3  &kp F10  &sk RGUI
                                                           &mt LGUI ESC            &kp INS         &trans           &trans          &kp INS  &trans
            >;
        };

        player_layer {
            display-name = "PLAY";
            bindings = <
&kp C_VOL_UP  &kp J              &kp E     &kp R   &kp L                &kp C        &none  &none  &none   &none  &tog PLY  &none
&kp C_VOL_DN  &mt LA(LEFT) LEFT  &kp DOWN  &kp UP  &mt LA(RIGHT) RIGHT  &kp F        &none  &none  &none   &none  &none     &none
&kp C_MUTE    &kp COMMA          &kp DOT   &kp LT  &kp GT               &kp FSLH     &none  &none  &none   &none  &none     &none
                                           &none   &mo PAD              &kp SPACE    &none  &none  &trans
            >;
        };

        numpad_layer {
            display-name = "PAD";
            bindings = <
&trans  &tog PLY         &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_N0       &none  &none  &none   &none  &none  &none
&trans  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS     &none  &none  &none   &none  &none  &none
&trans  &kp KP_SLASH     &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_MINUS    &none  &none  &none   &none  &none  &none
                                    &trans     &trans     &trans          &none  &none  &trans
            >;
        };

        mouse_layer {
            display-name = "MOUSE";
            bindings = <
&none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none        &none      &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none
&none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mkp MB4     &mkp MB4   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
&none  &none           &none           &mkp MCLK     &none            &mkp MB5     &mkp MB5   &none           &none           &none         &none            &none
                                       &tog MOUSE    &mkp LCLK        &mkp RCLK    &mkp MCLK  &mkp LCLK       &mkp RCLK
            >;
        };

        adjust_layer {
            display-name = "ADJUST";
            bindings = <
&bt BT_CLR      &bt BT_SEL 0       &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4       &out OUT_BLE  &out OUT_USB     &none            &none            &none            &tog ADJ
&bt BT_CLR_ALL  &ext_power EP_OFF  &ext_power EP_ON  &none         &sys_reset       &bootloader        &bootloader   &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &none
&trans          &rgb_ug RGB_OFF    &rgb_ug RGB_ON    &none         &rgb_ug RGB_EFF  &rgb_ug RGB_EFR    &none         &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &trans
                                                     &none         &none            &none              &none         &none            &none
            >;
        };
    };
};
